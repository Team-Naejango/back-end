# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:            # 수동으로 CI/CD 수행

# 변수 설정
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: naejango-github-actions-s3-bucket
  CODE_DEPLOY_APPLICATION_NAME: my-codedeloy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: my-codedeploy-group
  SECURITY_GROUP_NAME: rds-security

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    steps:

      # (1) Checkout
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.ACTIONS_TOKEN }}
          submodules: true

      # (2) JDK 11 셋팅
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      # (3) DB 셋팅
      - name: Set up PostgreSQL DB
        uses: harmon758/postgresql-action@v1
        with:
          postgresql version: '14'

      - name: Set up Postgis Extension
        uses: huaxk/postgis-action@v1
        with:
          postgresql version: '11'
          postgresql password: ${{ secrets.POSTGRESQL_PASSWORD }}
          postgresql user: master
          postgresql db: naejango_db

        # (4) 빌드 (RDS 접근 권한 설정)
        # (4-1) AWS 권한 획득 (RDS 서버)
      - name: Configure AWS RDS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.RDS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.RDS_SECRET_KEY }}
          aws-region: ap-northeast-2

        # (4-2) 깃허브 액션 러너의 아이피 얻어오기
      - name: Get Github action IP
        id: ip
        uses: haythem/public-ip@v1.2

        # (4-3) RDS 보안 그룹에 깃허브 러너 IP 인바운드 규칙 추가
      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-name ${{ env.SECURITY_GROUP_NAME }} --protocol tcp --port 5432 --cidr ${{ steps.ip.outputs.ipv4 }}/32 

        # (4-4) 빌드 권한 획득
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

        # (4-5) 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean build

        # (4-6) RDS 보안 그룹에서 깃허브 러너 IP 삭제
      - name: Remove Github Actions IP from security group
        run: |
          aws ec2 revoke-security-group-ingress --group-name ${{ env.SECURITY_GROUP_NAME }} --protocol tcp --port 5432 --cidr ${{ steps.ip.outputs.ipv4 }}/32 

      # (5) AWS 권한 획득 (S3, EC2, CodeDeploy Full Access )
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # (6) 빌드 결과물을 S3 버킷에 업로드
      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --source .   

      # (7) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip        
        
  
