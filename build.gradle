import org.springframework.boot.gradle.tasks.bundling.BootJar

buildscript {
	ext {
		restdocsApiSpecVersion = '0.16.2' // restdocsApiSpecVersion 버전 변수 설정
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.12'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
	id 'org.hidetake.swagger.generator' version '2.18.2'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
		// logback 제외하고 log4j2 사용
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-log4j2:2.7.12'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.locationtech.jts:jts-core:1.19.0'
	implementation 'org.hibernate:hibernate-spatial:5.6.15.Final'
	implementation 'com.auth0:java-jwt:4.4.0'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'org.postgresql:postgresql'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'junit:junit:4.13.2'
	testImplementation 'org.mockito:mockito-core:5.4.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation "com.epages:restdocs-api-spec-mockmvc:${restdocsApiSpecVersion}"
	testImplementation "com.epages:restdocs-api-spec-restassured:${restdocsApiSpecVersion}"
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	implementation 'org.springdoc:springdoc-openapi-ui:1.7.0'
}

tasks.named('test') { // build 할 때 'unitTest' Task 포함시키고 싶으면 dependsOn 주석 해제
//	dependsOn 'unitTest'
	useJUnitPlatform() {
		includeTags 'api'
	}
	testLogging { // 테스트 결과 출력
		afterSuite { testDescriptor, testResult ->
			if (testDescriptor.parent == null) {
				println "Test Results: ${testResult.resultType} (${testResult.testCount} tests, ${testResult.successfulTestCount} successes, ${testResult.failedTestCount} failures, ${testResult.skippedTestCount} skipped)"
			}
		}
	}
}

tasks.register('unitTest', Test){
	useJUnitPlatform(){
		excludeTags 'api'
	}
	testLogging { // 테스트 결과 출력
		afterSuite { testDescriptor, testResult ->
			if (testDescriptor.parent == null) {
				println "Test Results: ${testResult.resultType} (${testResult.testCount} tests, ${testResult.successfulTestCount} successes, ${testResult.failedTestCount} failures, ${testResult.skippedTestCount} skipped)"
			}
		}
	}
}

task copyPrivateConfig(type: Copy) {
	copy {
		from './submodule-data'
		include "*.yml"
		exclude "application-test.yml"
		into 'src/main/resources'
	}
}
task copyTestConfig(type: Copy) {
	copy {
		from './submodule-data'
		include"application-test.yml"
		into 'src/test/resources'
	}
}

// plain jar 생성 제외
jar {
	enabled = false
}

// application.yml 에 숨겨둔 ec2 ip 주소 가져오도록 설정
Properties properties = new Properties()
properties.load(project.rootProject.file('src/main/resources/application-dev.yml').newDataInputStream())
def serverUrl = properties.getProperty('server-url')

// openapi3 설정
openapi3 {
	servers = [{url = serverUrl}, {url = "http://localhost:8080"}]
	title = "Restdocs-Swagger API Documentation"
	description = "Spring REST Docs with SwaggerUI"
	version = "0.0.1"
	format = "yaml"
	outputDirectory = "${project.buildDir}/api-spec"
}

tasks.register('setSecuritySchemes'){
	dependsOn 'openapi3'

	doFirst{
		File file = new File("${project.buildDir}/api-spec/openapi3.yaml")
		BufferedWriter writer = new BufferedWriter(new FileWriter(file, true))
		writer.write("  securitySchemes:\n" +
				"    bearerAuth:\n" +
				"      type: http\n" +
				"      scheme: bearer\n" +
				"      bearerFormat: JWT\n" +
				"security:\n" +
				"  - bearerAuth: []")
		writer.close()
	}
}

tasks.register('copyApiSpec', Copy){
	dependsOn 'setSecuritySchemes'

	from "build/api-spec"
	into "build/resources/main/static/docs/"
}

// bootJar 실행 전, copyApiSpec 을 실행하도록 설정
tasks.withType(BootJar) {
	dependsOn 'copyApiSpec'
}

